{
    "schemes": [
        "http",
        "https"
    ],
    "swagger": "2.0",
    "info": {
        "description": "This is the API for the Midpoint Place project",
        "title": "Midpoint Place API",
        "contact": {},
        "version": "1.0"
    },
    "host": "api.midpoint.place",
    "basePath": "/v1",
    "paths": {
        "/groups": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a list of all public groups, ordered by creation date (newest first), limited to 100 results",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "groups"
                ],
                "summary": "List public groups",
                "operationId": "list-public-groups",
                "parameters": [
                    {
                        "enum": [
                            "creator",
                            "member"
                        ],
                        "type": "string",
                        "description": "Filter groups - 'creator' for groups created by user, 'member' for groups user belongs to",
                        "name": "self",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of public groups",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.GroupResponse"
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to fetch groups",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new group",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "groups"
                ],
                "summary": "Create a new group",
                "operationId": "create-group",
                "parameters": [
                    {
                        "description": "Group",
                        "name": "group",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateGroupRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Group created successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.GroupResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Group info validation failed",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to create group",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/groups/{groupIdOrCode}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get details of a group by ID or code",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "groups"
                ],
                "summary": "Get group information",
                "operationId": "get-group",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Group ID or Code",
                        "name": "groupIdOrCode",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "description": "Include Users",
                        "name": "includeUsers",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Include Places",
                        "name": "includePlaces",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.GroupResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Group not found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to get group",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update an existing group's details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "groups"
                ],
                "summary": "Update an existing group",
                "operationId": "update-group",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Group ID or Code",
                        "name": "groupIdOrCode",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Group Update Data",
                        "name": "group",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateGroupRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Group updated successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.GroupResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Group not found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Group info validation failed",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to update group",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/groups/{groupIdOrCode}/join": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Join an existing group",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "groups"
                ],
                "summary": "Join a group",
                "operationId": "join-group",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Group ID or Code",
                        "name": "groupIdOrCode",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Group User",
                        "name": "groupUser",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.GroupUserJoinRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.GroupUserResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Group not found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to join group",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Leave an existing group",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "groups"
                ],
                "summary": "Leave a group",
                "operationId": "leave-group",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Group ID or Code",
                        "name": "groupIdOrCode",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.GroupUserResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Group not found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to leave group",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users": {
            "post": {
                "description": "Register a new user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Register a new user",
                "operationId": "register-user",
                "parameters": [
                    {
                        "description": "User",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User created successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Email already exists",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/login": {
            "post": {
                "description": "Login a user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Login a user",
                "operationId": "login-user",
                "parameters": [
                    {
                        "description": "User",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.LoginUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User logged in successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid credentials",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/{userid}": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update location details for a user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Update user location",
                "operationId": "update-user-location",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "userid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UserUpdateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User updated successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "You are not allowed to update this user's data",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/waitlist/signup": {
            "post": {
                "description": "Add a user to the waitlist",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "waitlist"
                ],
                "summary": "Add a user to the waitlist",
                "operationId": "add-to-waitlist",
                "parameters": [
                    {
                        "description": "User",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.WaitlistSignupRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User added to waitlist successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.WaitlistSignupResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Email already signed up",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to add to waitlist",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "config.GroupType": {
            "type": "string",
            "enum": [
                "public",
                "protected",
                "private"
            ],
            "x-enum-varnames": [
                "GroupTypePublic",
                "GroupTypeProtected",
                "GroupTypePrivate"
            ]
        },
        "config.GroupUserRole": {
            "type": "string",
            "enum": [
                "admin",
                "member"
            ],
            "x-enum-varnames": [
                "GroupUserAdmin",
                "GroupUserMember"
            ]
        },
        "config.PlaceType": {
            "type": "string",
            "enum": [
                "restaurant",
                "bar",
                "cafe",
                "park"
            ],
            "x-enum-varnames": [
                "PlaceTypeRestaurant",
                "PlaceTypeBar",
                "PlaceTypeCafe",
                "PlaceTypePark"
            ]
        },
        "dto.CreateGroupRequest": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string"
                },
                "radius": {
                    "type": "integer",
                    "minimum": 0
                },
                "secret": {
                    "type": "string"
                },
                "type": {
                    "enum": [
                        "public",
                        "protected",
                        "private"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/config.GroupType"
                        }
                    ]
                }
            }
        },
        "dto.CreateUserRequest": {
            "type": "object",
            "properties": {
                "display_name": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "dto.ErrorResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Something went wrong"
                },
                "status": {
                    "type": "integer",
                    "example": 400
                }
            }
        },
        "dto.GroupCreator": {
            "type": "object",
            "properties": {
                "display_name": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                }
            }
        },
        "dto.GroupPlaceResponse": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "group_id": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "latitude": {
                    "type": "number"
                },
                "longitude": {
                    "type": "number"
                },
                "map_uri": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "place_id": {
                    "type": "string"
                },
                "rating": {
                    "type": "number"
                },
                "type": {
                    "$ref": "#/definitions/config.PlaceType"
                }
            }
        },
        "dto.GroupResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "creator": {
                    "$ref": "#/definitions/dto.GroupCreator"
                },
                "id": {
                    "type": "string"
                },
                "member_count": {
                    "type": "integer"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.GroupUserResponse"
                    }
                },
                "midpoint_latitude": {
                    "type": "number"
                },
                "midpoint_longitude": {
                    "type": "number"
                },
                "name": {
                    "type": "string"
                },
                "places": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.GroupPlaceResponse"
                    }
                },
                "radius": {
                    "type": "integer"
                },
                "type": {
                    "$ref": "#/definitions/config.GroupType"
                }
            }
        },
        "dto.GroupUserJoinRequest": {
            "type": "object",
            "required": [
                "latitude",
                "longitude"
            ],
            "properties": {
                "latitude": {
                    "type": "number"
                },
                "longitude": {
                    "type": "number"
                }
            }
        },
        "dto.GroupUserResponse": {
            "type": "object",
            "properties": {
                "display_name": {
                    "type": "string"
                },
                "group_id": {
                    "type": "string"
                },
                "latitude": {
                    "type": "number"
                },
                "longitude": {
                    "type": "number"
                },
                "role": {
                    "$ref": "#/definitions/config.GroupUserRole"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "dto.Location": {
            "type": "object",
            "required": [
                "latitude",
                "longitude"
            ],
            "properties": {
                "latitude": {
                    "type": "number"
                },
                "longitude": {
                    "type": "number"
                }
            }
        },
        "dto.LoginUserRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "dto.UpdateGroupRequest": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "radius": {
                    "type": "integer",
                    "minimum": 0
                },
                "secret": {
                    "type": "string"
                },
                "type": {
                    "enum": [
                        "public",
                        "protected",
                        "private"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/config.GroupType"
                        }
                    ]
                }
            }
        },
        "dto.UserResponse": {
            "type": "object",
            "properties": {
                "display_name": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "location": {
                    "$ref": "#/definitions/dto.Location"
                },
                "token": {
                    "type": "string"
                }
            }
        },
        "dto.UserUpdateRequest": {
            "type": "object",
            "properties": {
                "location": {
                    "$ref": "#/definitions/dto.Location"
                }
            }
        },
        "dto.WaitlistSignupRequest": {
            "type": "object",
            "required": [
                "email"
            ],
            "properties": {
                "email": {
                    "type": "string"
                }
            }
        },
        "dto.WaitlistSignupResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}