basePath: /v1
definitions:
  config.GroupType:
    enum:
    - public
    - protected
    - private
    type: string
    x-enum-varnames:
    - GroupTypePublic
    - GroupTypeProtected
    - GroupTypePrivate
  config.GroupUserRole:
    enum:
    - admin
    - member
    type: string
    x-enum-varnames:
    - GroupUserAdmin
    - GroupUserMember
  config.PlaceType:
    enum:
    - restaurant
    - bar
    - cafe
    - park
    type: string
    x-enum-varnames:
    - PlaceTypeRestaurant
    - PlaceTypeBar
    - PlaceTypeCafe
    - PlaceTypePark
  dto.CreateGroupRequest:
    properties:
      name:
        type: string
      radius:
        minimum: 0
        type: integer
      secret:
        type: string
      type:
        allOf:
        - $ref: '#/definitions/config.GroupType'
        enum:
        - public
        - protected
        - private
    required:
    - name
    type: object
  dto.CreateUserRequest:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  dto.ErrorResponse:
    properties:
      message:
        example: Something went wrong
        type: string
      status:
        example: 400
        type: integer
    type: object
  dto.GroupCreator:
    properties:
      id:
        type: integer
      username:
        type: string
    type: object
  dto.GroupPlaceResponse:
    properties:
      address:
        type: string
      group_id:
        type: string
      id:
        type: string
      latitude:
        type: number
      longitude:
        type: number
      map_uri:
        type: string
      name:
        type: string
      place_id:
        type: string
      rating:
        type: number
      type:
        $ref: '#/definitions/config.PlaceType'
    type: object
  dto.GroupResponse:
    properties:
      code:
        type: string
      creator:
        $ref: '#/definitions/dto.GroupCreator'
      id:
        type: string
      members:
        items:
          $ref: '#/definitions/dto.GroupUserResponse'
        type: array
      midpoint_latitude:
        type: number
      midpoint_longitude:
        type: number
      name:
        type: string
      places:
        items:
          $ref: '#/definitions/dto.GroupPlaceResponse'
        type: array
      radius:
        type: integer
      type:
        $ref: '#/definitions/config.GroupType'
    type: object
  dto.GroupUserJoinRequest:
    properties:
      latitude:
        type: number
      longitude:
        type: number
    required:
    - latitude
    - longitude
    type: object
  dto.GroupUserResponse:
    properties:
      group_id:
        type: string
      latitude:
        type: number
      longitude:
        type: number
      role:
        $ref: '#/definitions/config.GroupUserRole'
      user_id:
        type: integer
    type: object
  dto.Location:
    properties:
      latitude:
        type: number
      longitude:
        type: number
    required:
    - latitude
    - longitude
    type: object
  dto.LoginUserRequest:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  dto.UpdateGroupRequest:
    properties:
      name:
        type: string
      radius:
        minimum: 0
        type: integer
      secret:
        type: string
      type:
        allOf:
        - $ref: '#/definitions/config.GroupType'
        enum:
        - public
        - protected
        - private
    type: object
  dto.UserResponse:
    properties:
      id:
        type: integer
      location:
        $ref: '#/definitions/dto.Location'
      token:
        type: string
      username:
        type: string
    type: object
  dto.UserUpdateRequest:
    properties:
      location:
        $ref: '#/definitions/dto.Location'
    type: object
  dto.WaitlistSignupRequest:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  dto.WaitlistSignupResponse:
    properties:
      message:
        type: string
    type: object
host: api.midpoint.place
info:
  contact: {}
  description: This is the API for the Midpoint Place project
  title: Midpoint Place API
  version: "1.0"
paths:
  /groups:
    get:
      description: Get a list of all public groups, ordered by creation date (newest
        first), limited to 100 results
      operationId: list-public-groups
      parameters:
      - description: Filter groups - 'creator' for groups created by user, 'member'
          for groups user belongs to
        enum:
        - creator
        - member
        in: query
        name: self
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of public groups
          schema:
            items:
              $ref: '#/definitions/dto.GroupResponse'
            type: array
        "500":
          description: Failed to fetch groups
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List public groups
      tags:
      - groups
    post:
      consumes:
      - application/json
      description: Create a new group
      operationId: create-group
      parameters:
      - description: Group
        in: body
        name: group
        required: true
        schema:
          $ref: '#/definitions/dto.CreateGroupRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Group created successfully
          schema:
            $ref: '#/definitions/dto.GroupResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "422":
          description: Group info validation failed
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Failed to create group
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new group
      tags:
      - groups
  /groups/{groupIdOrCode}:
    get:
      description: Get details of a group by ID or code
      operationId: get-group
      parameters:
      - description: Group ID or Code
        in: path
        name: groupIdOrCode
        required: true
        type: string
      - description: Include Users
        in: query
        name: includeUsers
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GroupResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Group not found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Failed to get group
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get group information
      tags:
      - groups
    patch:
      consumes:
      - application/json
      description: Update an existing group's details
      operationId: update-group
      parameters:
      - description: Group ID or Code
        in: path
        name: groupIdOrCode
        required: true
        type: string
      - description: Group Update Data
        in: body
        name: group
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateGroupRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Group updated successfully
          schema:
            $ref: '#/definitions/dto.GroupResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Group not found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "422":
          description: Group info validation failed
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Failed to update group
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update an existing group
      tags:
      - groups
  /groups/{groupIdOrCode}/join:
    delete:
      description: Leave an existing group
      operationId: leave-group
      parameters:
      - description: Group ID or Code
        in: path
        name: groupIdOrCode
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GroupUserResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Group not found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Failed to leave group
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Leave a group
      tags:
      - groups
    put:
      description: Join an existing group
      operationId: join-group
      parameters:
      - description: Group ID or Code
        in: path
        name: groupIdOrCode
        required: true
        type: string
      - description: Group User
        in: body
        name: groupUser
        required: true
        schema:
          $ref: '#/definitions/dto.GroupUserJoinRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GroupUserResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Group not found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Failed to join group
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Join a group
      tags:
      - groups
  /users:
    post:
      consumes:
      - application/json
      description: Register a new user
      operationId: register-user
      parameters:
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User created successfully
          schema:
            $ref: '#/definitions/dto.UserResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "409":
          description: Username already exists
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Register a new user
      tags:
      - users
  /users/{userid}:
    post:
      consumes:
      - application/json
      description: Update location details for a user
      operationId: update-user-location
      parameters:
      - description: User ID
        in: path
        name: userid
        required: true
        type: string
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UserUpdateRequest'
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Update user location
      tags:
      - users
  /users/login:
    post:
      consumes:
      - application/json
      description: Login a user
      operationId: login-user
      parameters:
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.LoginUserRequest'
      produces:
      - application/json
      responses: {}
      summary: Login a user
      tags:
      - users
  /waitlist/signup:
    post:
      consumes:
      - application/json
      description: Add a user to the waitlist
      operationId: add-to-waitlist
      parameters:
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.WaitlistSignupRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User added to waitlist successfully
          schema:
            $ref: '#/definitions/dto.WaitlistSignupResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "409":
          description: Email already signed up
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Failed to add to waitlist
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Add a user to the waitlist
      tags:
      - waitlist
schemes:
- http
- https
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
